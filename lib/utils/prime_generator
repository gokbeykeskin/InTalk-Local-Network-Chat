import 'package:dart_random_choice/dart_random_choice.dart';

class PrimeGenerator{

  static BigInt generateLargePrime(int bitLength) {
    final random = Random.secure();

    while (true) {
      final potentialPrime = _generateRandomOddNumber(bitLength, random);

      if (_isPrime(potentialPrime)) {
        return potentialPrime;
      }
    }
  }

  static BigInt _generateRandomOddNumber(int bitLength, Random random) {
    final min = BigInt.one << (bitLength - 1);
    final max = (BigInt.one << bitLength) - BigInt.one;
    return randomChoice(
      List.generate((max - min).toInt() ~/ 2, (i) => min + BigInt.from(i * 2 + 1)),
      random: random,
    );
  }

  static bool _isPrime(BigInt number) {
    if (number <= BigInt.two) {
      return false;
    }

    if (number == BigInt.two || number == BigInt.three) {
      return true;
    }

    if (number.isEven) {
      return false;
    }

    final k = 100; // Number of iterations for primality testing

    for (var i = 0; i < k; i++) {
      final a = _randomBase(number);
      if (!_millerRabinTest(number, a)) {
        return false;
      }
    }

    return true;
  }

  static bool _millerRabinTest(BigInt number, BigInt witness) {
    var exponent = number - BigInt.one;
    var count = 0;

    while (exponent.isEven) {
      exponent >>= 1;
      count++;
    }

    var result = witness.modPow(exponent, number);

    if (result == BigInt.one || result == number - BigInt.one) {
      return true;
    }

    for (var _ = 0; _ < count - 1; _++) {
      result = result.modPow(BigInt.two, number);

      if (result == number - BigInt.one) {
        return true;
      }
    }

    return false;
  }

  static BigInt _randomBase(BigInt number) {
    final random = Random.secure();
    final max = number - BigInt.two;
    return BigInt.from(random.nextInt(max.toInt())) + BigInt.two;
  }

}
